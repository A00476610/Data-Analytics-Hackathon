from django.db import models
from django.utils.timezone import now

class Location(models.Model):
    geographic_location = models.CharField(max_length=255, blank=True, default='')
    address = models.CharField(max_length=255, blank=True, default='')
    longitude = models.FloatField(blank=True, null=True, default=0.0)
    latitude = models.FloatField(blank=True, null=True, default=0.0)
    region = models.CharField(max_length=255, blank=True, default='')
    area = models.CharField(max_length=255, blank=True, default='')

class Amenities(models.Model):
    parking_included = models.BooleanField(default=False)
    pet_friendly = models.BooleanField(default=False)
    move_in_date = models.DateTimeField(blank=True, null=True, default=now)
    furnished = models.BooleanField(default=False)
    air_conditioning = models.BooleanField(default=False)
    smoking_permitted = models.BooleanField(default=False)
    elevator_accessibility_features = models.BooleanField(default=False)
    barrier_free_entrances_and_ramps = models.BooleanField(default=False)
    visual_aids = models.BooleanField(default=False)
    accessible_washrooms_in_suite = models.BooleanField(default=False)
    heat = models.BooleanField(default=False)
    hydro = models.BooleanField(default=False)
    water = models.BooleanField(default=False)
    cable_tv = models.BooleanField(default=False)
    internet = models.BooleanField(default=False)
    laundry_unit = models.BooleanField(default=False)
    laundry_building = models.BooleanField(default=False)
    dishwasher = models.BooleanField(default=False)
    fridge_freezer = models.BooleanField(default=False)
    yard = models.BooleanField(default=False)
    balcony = models.BooleanField(default=False)
    building_security = models.BooleanField(default=False)
    building_elevator = models.BooleanField(default=False)
    building_gym = models.BooleanField(default=False)
    bycycle_parking = models.BooleanField(default=False)
    storage_space = models.BooleanField(default=False)
    fridge = models.BooleanField(default=False)
    ceiling_height = models.FloatField(blank=True, null=True, default=0.0)
    underground_parking = models.BooleanField(default=False)
    flooring = models.CharField(max_length=255, blank=True, default='')
    hrv_ventilation = models.BooleanField(default=False)
    bathroom = models.IntegerField(blank=True, null=True, default=0)
    floors = models.IntegerField(blank=True, null=True, default=0)
    appliances = models.CharField(max_length=255, blank=True, default='')
    balcony_size = models.CharField(max_length=255, blank=True, default='')
    policy = models.CharField(max_length=255, blank=True, default='')
    kitchen = models.CharField(max_length=255, blank=True, default='')
    deposit = models.FloatField(blank=True, null=True, default=0.0)
    heated_underground = models.BooleanField(default=False)
    other_features = models.CharField(max_length=255, blank=True, default='')

class Apartment(models.Model):
    location = models.ForeignKey(Location, on_delete=models.CASCADE)
    property_name = models.CharField(max_length=255, blank=True, default='')
    unit = models.CharField(max_length=255, blank=True, default='')
    type = models.CharField(max_length=255, blank=True, default='')
    monthly_rent = models.FloatField(blank=True, null=True, default=0.0)
    lease_term = models.CharField(max_length=255, blank=True, default='')
    num_bedrooms = models.IntegerField(blank=True, null=True, default=0)
    num_bathrooms = models.IntegerField(blank=True, null=True, default=0)
    image_link = models.URLField(blank=True, default='')
    available_date = models.DateTimeField(blank=True, null=True, default=now)
    size_sqft = models.IntegerField(blank=True, null=True, default=0)
    number_of_units = models.IntegerField(blank=True, null=True, default=0)
    amenities = models.ForeignKey(Amenities, on_delete=models.CASCADE)

class Commercial(models.Model):
    location = models.ForeignKey(Location, on_delete=models.CASCADE)
    property_name = models.CharField(max_length=255, blank=True, null=True, default='')
    unit = models.CharField(max_length=255, blank=True, null=True, default='')
    type = models.CharField(max_length=255, blank=True, null=True, default='')
    rent = models.FloatField(blank=True, null=True, default=0)
    rent_includes = models.CharField(max_length=255, blank=True, null=True, default='')
    image_link = models.CharField(max_length=255, blank=True, null=True, default='')
    lease = models.CharField(max_length=255, blank=True, null=True, default='')
    tenant_pays = models.CharField(max_length=255, blank=True, null=True, default='')
    rentable_area = models.FloatField(blank=True, null=True, default=0)
    useable_area = models.FloatField(blank=True, null=True, default=0)
    number_of_units = models.IntegerField(blank=True, null=True, default=0)
    amenities = models.ForeignKey(Amenities, on_delete=models.CASCADE)

class Parking(models.Model):
    location = models.ForeignKey(Location, on_delete=models.CASCADE)
    property_name = models.CharField(max_length=255, blank=True, null=True, default='')
    type = models.CharField(max_length=255, blank=True, null=True, default='')
    parking = models.CharField(max_length=255, blank=True, null=True, default='')
    available = models.DateTimeField(blank=True, null=True, default=now)
    image_link = models.CharField(max_length=255, blank=True, null=True, default='')
    price = models.FloatField(blank=True, null=True, default=0)
    tenant_services_coordinator = models.CharField(max_length=255, blank=True, null=True, default='')
    resident_managers = models.CharField(max_length=255, blank=True, null=True, default='')
    commercial_property_manager = models.CharField(max_length=255, blank=True, null=True, default='')
    email = models.CharField(max_length=255, blank=True, null=True, default='')
    website = models.CharField(max_length=255, blank=True, null=True, default='')
    tel = models.CharField(max_length=255, blank=True, null=True, default='')
    fax = models.CharField(max_length=255, blank=True, null=True, default='')
    term = models.CharField(max_length=255, blank=True, null=True, default='')
    termination_policy = models.CharField(max_length=255, blank=True, null=True, default='')
    rate = models.FloatField(blank=True, null=True, default=0)
    deposit = models.FloatField(blank=True, null=True, default=0)

class PredictionResults(models.Model):
    location = models.ForeignKey(Location, on_delete=models.CASCADE, null=True, blank=True)
    predicted_price = models.FloatField(blank=True, null=True, default=0)
    confidence_interval_low = models.FloatField(blank=True, null=True, default=0)
    confidence_interval_high = models.FloatField(blank=True, null=True, default=0)
    prediction_date = models.DateTimeField(blank=True, null=True, default=now)
    apartment = models.ForeignKey(Apartment, on_delete=models.CASCADE, null=True, blank=True)
    commercial = models.ForeignKey(Commercial, on_delete=models.CASCADE, null=True, blank=True)
    parking = models.ForeignKey(Parking, on_delete=models.CASCADE, null=True, blank=True)
